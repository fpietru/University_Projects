Peer review: Jakub Wilczyński

1. Niektóre linijki (zwłaszcze z komentarzami) są (znacznie) dłuższe
   niż 80 znaków, proponuję je rozdzielić.

2. Tam gdzie masz malloc w funckji nowy_zbior, dostaję warning:
   "Call to 'malloc' has an allocation size of @ bytes";
   być może można go zignorować, ale warto się upewnić skąd on się bierze

3. W funkcji nalezy: bez kontekstu nie wiedziałbym, co oznaczają nazwy:
   st, ed i md - można pomyśleć nad bardziej adekwatną nazwą.

4. W funkcji nalezy: gdyby zamienić while na do-while, być może moglibyśmy 
   uniknąć powtarzania tego długiego warunku dla return?
   I potem na końcu 'return false'. Myślę że mogłoby być bardziej estetycznie.

5. W funkcji nalezy: czy zamiast:
   A.tablica[st].poczatek <=  x.poczatek && x.koniec <= A.tablica[st].koniec
   nie wystarczyłoby czy_zawarta_trojka(x, A.tablica[st])?

6. W funkcji wywal_zdegenerowane: czy_zdegenerowana_trojka zwraca bool,
   czy warto przyrównywać do zera zamiast użyć negacji ('!')?

7. W funkcji ary: ostatnia = scal_trojki(...) - to na pewno działa?
   Na moje oko ostatnia powinna być kopią A.tablica[i], a jeśli tak,
   to zmiana wartości 'ostatnia' nie wpływa na A.tablica[i].
   Możesz zrobić wskaźnik: trojka *ostatnia = &A.tablica[i].

8. W funkcji ary: może dałoby się tutaj też użyć funkcji kompresja_zbioru?
   Dla uproszczenia kodu.

Responder: Franciszek Pietrusiak
1. [DONE]
2. [???] nie mam żadnych warningów, jakie masz flagi kompilacji?
3. [DONE]
4. co prawda nie zrobiłem do-while, ale myślę, że teraz ten binseach jest bardziej czytelny
5. [DONE]
6. [DONE]
7. działa, ostatnia = wszystkie przecinajace sie trojki scalone w jedna, ktora ma mozliwosc przeciecia sie z aktualnie rozpatrywana trojka (dodalem ten komentarz w kodzie)
8. niestety nie, bo kompresja_zbioru korzysta z ary